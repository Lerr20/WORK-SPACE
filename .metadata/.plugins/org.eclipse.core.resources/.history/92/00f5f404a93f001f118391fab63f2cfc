package uni.pe.Eureka.Service;

import java.util.List;
import java.util.Map;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.jdbc.core.BeanPropertyRowMapper;
import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.stereotype.Service;

import uni.pe.Eureka.Dto.CuentaDto;
import uni.pe.Eureka.Dto.movimientoDto;

@Service
public class eurekaService {

	@Autowired
	private JdbcTemplate jdbcTemplate;

	// METODO SIN DTO PARA SOLO MOSTRAR
	public List<Map<String, Object>> resumenMovimientoSucursal() {

		String sql;
		List<Map<String, Object>> lista;
		sql = " SELECT ";
		sql += "    cuenta.chr_sucucodigo AS CODIGO,";
		sql += "    sucursal.vch_sucunombre AS NOMBRE, ";
		sql += "    moneda.vch_monedescripcion AS MONEDA, ";
		sql += "    SUM(CASE WHEN TipoMovimiento.vch_tipoaccion = 'INGRESO' THEN Movimiento.dec_moviimporte ELSE 0 END) AS INGRESO,  ";
		sql += "    SUM(CASE WHEN  TipoMovimiento.vch_tipoaccion = 'SALIDA' THEN Movimiento.dec_moviimporte ELSE 0 END) AS SALIDA  ";
		sql += "FROM  Movimiento ";
		sql += "     JOIN cuenta ON cuenta.chr_cuencodigo = Movimiento.chr_cuencodigo  ";
		sql += "    JOIN sucursal ON sucursal.chr_sucucodigo = cuenta.chr_sucucodigo ";
		sql += "     JOIN Moneda ON Moneda.chr_monecodigo = cuenta.chr_monecodigo ";
		sql += "     JOIN TipoMovimiento ON TipoMovimiento.chr_tipocodigo = Movimiento.chr_tipocodigo ";
		sql += "GROUP BY  ";
		sql += "    cuenta.chr_sucucodigo, sucursal.vch_sucunombre, moneda.vch_monedescripcion  ";
		sql += "order by  ";
		sql += "    cuenta.chr_sucucodigo, ";
		sql += "    moneda.vch_monedescripcion desc;";
		lista= jdbcTemplate.queryForList(sql);
		return lista;
	}

	// METODO CON DTO PARA MOSTRAR DE ACUERDO A UN CODIGO ESPECIAL

	public  List<movimientoDto> resumenMovimientosId(String codigo) {
		
		List<movimientoDto> lista = null;
		String sql;
		sql= " SELECT ";
		sql+= "    cuenta.chr_sucucodigo AS CODIGO,";
		sql+= "    sucursal.vch_sucunombre AS NOMBRE, ";
		sql+= "    moneda.vch_monedescripcion AS MONEDA, ";
		sql+= "    SUM(CASE WHEN TipoMovimiento.vch_tipoaccion = 'INGRESO' THEN Movimiento.dec_moviimporte ELSE 0 END) AS INGRESO,  ";
		sql+= "    SUM(CASE WHEN  TipoMovimiento.vch_tipoaccion = 'SALIDA' THEN Movimiento.dec_moviimporte ELSE 0 END) AS SALIDA  ";
		sql+= "FROM  Movimiento ";
		sql+= "     JOIN cuenta ON cuenta.chr_cuencodigo = Movimiento.chr_cuencodigo  ";
		sql+= "    JOIN sucursal ON sucursal.chr_sucucodigo = cuenta.chr_sucucodigo ";
		sql+= "     JOIN Moneda ON Moneda.chr_monecodigo = cuenta.chr_monecodigo ";
		sql+= "     JOIN TipoMovimiento ON TipoMovimiento.chr_tipocodigo = Movimiento.chr_tipocodigo";
		sql+= " where cuenta.chr_sucucodigo= ? ";
		sql+= "GROUP BY  ";
		sql+= "    cuenta.chr_sucucodigo, sucursal.vch_sucunombre, moneda.vch_monedescripcion  ";
		sql+= "order by  ";
		sql+= "    cuenta.chr_sucucodigo, ";
		sql+= "    moneda.vch_monedescripcion desc;";
		
		try {
	        lista = jdbcTemplate.query(sql, new BeanPropertyRowMapper<>(movimientoDto.class), codigo);
	    } catch (Exception e) {
	        // ManejoDeExcepciones
	    }

	    return lista;
	}
	
	//METODO SIN DTO PARA CUENTAS ACTIVAS
	
	public List<Map<String, Object>> resumenCuentasActivas(){
		
		List<Map<String, Object>> lista;
		String sql="";
		sql ="SELECT ";
		sql+= "    cuenta.chr_sucucodigo AS IDSUCURSAL, ";
		sql+= "    sucursal.vch_sucunombre AS NOMBRE, ";
		sql+= "    SUM(CASE WHEN cuenta.vch_cuenestado = 'ACTIVO' AND cuenta.chr_monecodigo = '01' THEN 1 ELSE 0 END) AS SOLES, ";
		sql+= "    SUM(CASE WHEN cuenta.vch_cuenestado = 'ACTIVO' AND cuenta.chr_monecodigo = '02' THEN 1 ELSE 0 END) AS DOLARES ";
		sql+= "FROM ";
		sql+= "    cuenta ";
		sql+= "JOIN ";
		sql+= "    sucursal ON sucursal.chr_sucucodigo = cuenta.chr_sucucodigo ";
		sql+= "GROUP BY ";
		sql+= "    cuenta.chr_sucucodigo,";
		sql+= "    sucursal.vch_sucunombre ";
		sql+= "ORDER BY ";
		sql+= "    cuenta.chr_sucucodigo;";
		
		lista =jdbcTemplate.queryForList(sql);
		return lista;
	} 
	
	//METODO CON DTO PARA CUENTAS ACTIVAS POR DETERMINADA SUCURSAL
	
	public List<CuentaDto> cuentasActivasPorSucursal(String codigo){
		
		List<CuentaDto> lista = null;
		String sql;
		sql =" SELECT ";
		sql+= "    cuenta.chr_sucucodigo AS IDSUCURSAL, ";
		sql+= "    sucursal.vch_sucunombre AS NOMBRE, ";
		sql+= "    SUM(CASE WHEN cuenta.vch_cuenestado = 'ACTIVO' AND cuenta.chr_monecodigo = '01' THEN 1 ELSE 0 END) AS SOLES, ";
		sql+= "    SUM(CASE WHEN cuenta.vch_cuenestado = 'ACTIVO' AND cuenta.chr_monecodigo = '02' THEN 1 ELSE 0 END) AS DOLARES  ";
		sql+= "FROM  ";
		sql+= "    cuenta ";
		sql+= "JOIN  ";
		sql+= "    sucursal ON sucursal.chr_sucucodigo = cuenta.chr_sucucodigo ";
		sql+= "	where  cuenta.chr_sucucodigo=001 ";
		sql+= "GROUP BY  ";
		sql+= "    cuenta.chr_sucucodigo, ";
		sql+= "    sucursal.vch_sucunombre  ";
		sql+= "ORDER BY  ";
		sql+= "    cuenta.chr_sucucodigo;";
		
		try {
	        lista = jdbcTemplate.query(sql, new BeanPropertyRowMapper<>(CuentaDto.class), codigo);
	    } catch (Exception e) {
	        // ManejoDeExcepciones
	    }

	    return lista;
	}
	
}
