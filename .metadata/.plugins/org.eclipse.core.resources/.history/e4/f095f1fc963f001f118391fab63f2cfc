package uni.pe.Eureka.Service;

import java.util.ArrayList;
import java.util.List;
import java.util.Map;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.jdbc.core.BeanPropertyRowMapper;
import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.stereotype.Service;

import uni.pe.Eureka.Dto.movimientoDto;

@Service
public class eurekaService {

	@Autowired
	private JdbcTemplate jdbcTemplate;

	// METODO SIN DTO PARA SOLO MOSTRAR
	public List<Map<String, Object>> resumenMovimientoSucursal() {

		String sql;
		sql = " SELECT ";
		sql += "    cuenta.chr_sucucodigo AS CODIGO,";
		sql += "    sucursal.vch_sucunombre AS NOMBRE, ";
		sql += "    moneda.vch_monedescripcion AS MONEDA, ";
		sql += "    SUM(CASE WHEN TipoMovimiento.vch_tipoaccion = 'INGRESO' THEN Movimiento.dec_moviimporte ELSE 0 END) AS INGRESO,  ";
		sql += "    SUM(CASE WHEN  TipoMovimiento.vch_tipoaccion = 'SALIDA' THEN Movimiento.dec_moviimporte ELSE 0 END) AS SALIDA  ";
		sql += "FROM  Movimiento ";
		sql += "     JOIN cuenta ON cuenta.chr_cuencodigo = Movimiento.chr_cuencodigo  ";
		sql += "    JOIN sucursal ON sucursal.chr_sucucodigo = cuenta.chr_sucucodigo ";
		sql += "     JOIN Moneda ON Moneda.chr_monecodigo = cuenta.chr_monecodigo ";
		sql += "     JOIN TipoMovimiento ON TipoMovimiento.chr_tipocodigo = Movimiento.chr_tipocodigo ";
		sql += "GROUP BY  ";
		sql += "    cuenta.chr_sucucodigo, sucursal.vch_sucunombre, moneda.vch_monedescripcion  ";
		sql += "order by  ";
		sql += "    cuenta.chr_sucucodigo, ";
		sql += "    moneda.vch_monedescripcion desc;";
		return jdbcTemplate.queryForList(sql);
	}

	// METODO CON DTO PARA MOSTRAR DE ACUERDO A UN CODIGO ESPECIAL

	public List<movimientoDto> resumenMovimientosId(String codigo) {
		
		List<movimientoDto> lista = new ArrayList<>();
		String sql;
		sql= " SELECT ";
		sql+= "    cuenta.chr_sucucodigo AS CODIGO,";
		sql+= "    sucursal.vch_sucunombre AS NOMBRE, ";
		sql+= "    moneda.vch_monedescripcion AS MONEDA, ";
		sql+= "    SUM(CASE WHEN TipoMovimiento.vch_tipoaccion = 'INGRESO' THEN Movimiento.dec_moviimporte ELSE 0 END) AS INGRESO,  ";
		sql+= "    SUM(CASE WHEN  TipoMovimiento.vch_tipoaccion = 'SALIDA' THEN Movimiento.dec_moviimporte ELSE 0 END) AS SALIDA  ";
		sql+= "FROM  Movimiento ";
		sql+= "     JOIN cuenta ON cuenta.chr_cuencodigo = Movimiento.chr_cuencodigo  ";
		sql+= "    JOIN sucursal ON sucursal.chr_sucucodigo = cuenta.chr_sucucodigo ";
		sql+= "     JOIN Moneda ON Moneda.chr_monecodigo = cuenta.chr_monecodigo ";
		sql+= "     JOIN TipoMovimiento ON TipoMovimiento.chr_tipocodigo = Movimiento.chr_tipocodigo";
		sql+= " where cuenta.chr_sucucodigo= ? ";
		sql+= "GROUP BY  ";
		sql+= "    cuenta.chr_sucucodigo, sucursal.vch_sucunombre, moneda.vch_monedescripcion  ";
		sql+= "order by  ";
		sql+= "    cuenta.chr_sucucodigo, ";
		sql+= "    moneda.vch_monedescripcion desc;";
		
		try {
	        List<Map<String, Object>> rows = jdbcTemplate.queryForList(sql, codigo);
	        for (Map<String, Object> row : rows) {
	            movimientoDto dto = new movimientoDto();
	            dto.setCodigo((String) row.get("CODIGO"));
	            dto.setNombre((String) row.get("NOMBRE"));
	            dto.setMoneda((String) row.get("MONEDA"));
	            dto.setIngreso((int) row.get("INGRESO"));
	            dto.setSalida((int) row.get("SALIDA"));
	            lista.add(dto);
	        }
	    } catch (Exception e) {
	        e.printStackTrace();
	        // Manejo de la excepción aquí según tus necesidades
	    }

	    return lista;
	}
}
